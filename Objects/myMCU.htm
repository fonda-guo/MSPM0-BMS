<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Objects\myMCU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Objects\myMCU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Tue Jul  8 15:36:56 2025
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIMA0_IRQHandler &rArr; BMSTask &rArr; BMSCalTask &rArr; SingleBatSOCupdate &rArr; SingleBatSOCCalVolCali &rArr; CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">ADC0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[b]">ADC1_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[1b]">AES_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[c]">CANFD0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[d]">DAC0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[1d]">DMA_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[6]">GROUP0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[7]">GROUP1_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from main.o(.text.I2C1_IRQHandler) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[1c]">RTC_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[e]">SPI0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[f]">SPI1_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[15]">TIMA0_IRQHandler</a> from main.o(.text.TIMA0_IRQHandler) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[16]">TIMA1_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[13]">TIMG0_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[18]">TIMG12_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[14]">TIMG6_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[17]">TIMG7_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[8]">TIMG8_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from main.o(.text.UART0_IRQHandler) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[9]">UART3_IRQHandler</a> from startup_mspm0g350x_uvision.o(.text) referenced from startup_mspm0g350x_uvision.o(RESET)
 <LI><a href="#[1e]">__main</a> from __main.o(!!!main) referenced from startup_mspm0g350x_uvision.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[21]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10d]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[10f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[110]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[111]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[112]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[113]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[114]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[115]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[116]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[117]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[118]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[119]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[120]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[121]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[122]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[123]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[124]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[125]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[20]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[12d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[23]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[27]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BQDataGet &rArr; CellBalanceNormalTask &rArr; OpenCellBalance &rArr; BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[130]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CANFD0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>

<P><STRONG><a name="[6]"></a>GROUP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>GROUP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMG12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMG6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMG7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TIMG8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_mspm0g350x_uvision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[2f]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSInit
</UL>

<P><STRONG><a name="[131]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSInit
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_unprotectSector
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_idivmod</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
</UL>

<P><STRONG><a name="[137]"></a>__truncdfsf2</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__adddf3</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
</UL>

<P><STRONG><a name="[33]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__subdf3</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
</UL>

<P><STRONG><a name="[13d]"></a>__muldf3</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
</UL>

<P><STRONG><a name="[13f]"></a>__extendsfdf2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliKChooseBasedOnSOC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSOCEdgeSlowDownConditon
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCaliCal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOHTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCShowUpdate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxCoulombCount
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResistanceCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[141]"></a>__divsf3</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[38]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliKChooseBasedOnSOC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSOCEdgeSlowDownConditon
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCaliCal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOHTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCShowUpdate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxCoulombCount
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResistanceCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[142]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[143]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCaliCal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResistanceCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[144]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliKChooseBasedOnSOC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSOCEdgeSlowDownConditon
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCaliCal
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOHTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCShowUpdate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxCoulombCount
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[145]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[29]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[146]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[147]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[148]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>AFEBasicTask</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dataprocess.o(.text.AFEBasicTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AFEBasicTask &rArr; BQ76952_ReadBatteryStatus &rArr; DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ76952_ReadBatteryStatus
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandSubcommands
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
</UL>

<P><STRONG><a name="[5c]"></a>BMSBasicDataGet</STRONG> (Thumb, 360 bytes, Stack size 36 bytes, b5_soc.o(.text.BMSBasicDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BMSBasicDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSTask
</UL>

<P><STRONG><a name="[44]"></a>BMSCalTask</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, b5_soc.o(.text.BMSCalTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = BMSCalTask &rArr; SingleBatSOCupdate &rArr; SingleBatSOCCalVolCali &rArr; CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HysteresisTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOHTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCShowUpdate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCupdate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCoulombTotalRealTimeUpdate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxCoulombCount
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureCali
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResistanceCal
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSTask
</UL>

<P><STRONG><a name="[50]"></a>BMSCoulombTotalFinalUpdate</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, b5_soc.o(.text.BMSCoulombTotalFinalUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BMSCoulombTotalFinalUpdate &rArr; SingleBatSOCCoulombClear
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCoulombClear
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCoulombFull
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSTask
</UL>

<P><STRONG><a name="[49]"></a>BMSCoulombTotalRealTimeUpdate</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, b5_soc.o(.text.BMSCoulombTotalRealTimeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BMSCoulombTotalRealTimeUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[53]"></a>BMSInit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, b5_soc.o(.text.BMSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BMSInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>BMSSingleBatVolCheck</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, b5_soc.o(.text.BMSSingleBatVolCheck))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>BMSStartUp</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, b5_soc.o(.text.BMSStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = BMSStartUp &rArr; BatSOCVolInitEstimate &rArr; BatSOCVolEst_NoCur &rArr; BiSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HysteresisInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOHInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolInitEstimate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read32Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSTask
</UL>

<P><STRONG><a name="[5b]"></a>BMSTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, b5_soc.o(.text.BMSTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = BMSTask &rArr; BMSCalTask &rArr; SingleBatSOCupdate &rArr; SingleBatSOCCalVolCali &rArr; CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSWriteEETask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCoulombTotalFinalUpdate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSBasicDataGet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSStartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMA0_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>BMSWriteEETask</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, b5_soc.o(.text.BMSWriteEETask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BMSWriteEETask &rArr; Write32Flash &rArr; DL_FlashCTL_unprotectSector
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_eraseMemoryFromRAM
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_unprotectSector
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write32Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSTask
</UL>

<P><STRONG><a name="[42]"></a>BQ76952_ReadBatteryStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bq769x2_protocol.o(.text.BQ76952_ReadBatteryStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BQ76952_ReadBatteryStatus &rArr; DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFEBasicTask
</UL>

<P><STRONG><a name="[62]"></a>BQ769x2_ReadAllTemperatures</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bq769x2_protocol.o(.text.BQ769x2_ReadAllTemperatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BQ769x2_ReadAllTemperatures &rArr; BQ769x2_ReadTemperature &rArr; DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
</UL>

<P><STRONG><a name="[64]"></a>BQ769x2_ReadCurrent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bq769x2_protocol.o(.text.BQ769x2_ReadCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BQ769x2_ReadCurrent &rArr; DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
</UL>

<P><STRONG><a name="[63]"></a>BQ769x2_ReadTemperature</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bq769x2_protocol.o(.text.BQ769x2_ReadTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BQ769x2_ReadTemperature &rArr; DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadAllTemperatures
</UL>

<P><STRONG><a name="[69]"></a>BQ769x2_ReadVoltage</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bq769x2_protocol.o(.text.BQ769x2_ReadVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BQ769x2_ReadVoltage &rArr; DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
</UL>

<P><STRONG><a name="[6a]"></a>BQ769x2_SetRegister</STRONG> (Thumb, 258 bytes, Stack size 80 bytes, bq769x2_protocol.o(.text.BQ769x2_SetRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCellBalance
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseCellBalance
</UL>

<P><STRONG><a name="[6e]"></a>BQDataGet</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, dataprocess.o(.text.BQDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BQDataGet &rArr; CellBalanceNormalTask &rArr; OpenCellBalance &rArr; BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFEBasicTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_flushControllerRXFIFO
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceNormalTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadAllTemperatures
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadCurrent
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadVoltage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>BatSOCVolEst_NoCur</STRONG> (Thumb, 588 bytes, Stack size 120 bytes, b5_soc.o(.text.BatSOCVolEst_NoCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = BatSOCVolEst_NoCur &rArr; BiSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BiSearch
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolInitEstimate
</UL>

<P><STRONG><a name="[57]"></a>BatSOCVolInitEstimate</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, b5_soc.o(.text.BatSOCVolInitEstimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = BatSOCVolInitEstimate &rArr; BatSOCVolEst_NoCur &rArr; BiSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_value
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSStartUp
</UL>

<P><STRONG><a name="[75]"></a>BiSearch</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, b5_soc.o(.text.BiSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BiSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliK
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
</UL>

<P><STRONG><a name="[48]"></a>BoxCoulombCount</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, b5_soc.o(.text.BoxCoulombCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BoxCoulombCount &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[4b]"></a>BoxSOCCalVolCaliCal</STRONG> (Thumb, 656 bytes, Stack size 104 bytes, b5_soc.o(.text.BoxSOCCalVolCaliCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BoxSOCCalVolCaliCal &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[58]"></a>BoxSOCInitEstimate</STRONG> (Thumb, 412 bytes, Stack size 88 bytes, b5_soc.o(.text.BoxSOCInitEstimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BoxSOCInitEstimate &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSStartUp
</UL>

<P><STRONG><a name="[4c]"></a>BoxSOCShowUpdate</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, b5_soc.o(.text.BoxSOCShowUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BoxSOCShowUpdate &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[59]"></a>BoxSOHInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, b5_soc.o(.text.BoxSOHInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BoxSOHInit &rArr; Read32Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read32Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSStartUp
</UL>

<P><STRONG><a name="[7b]"></a>CaliK</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, b5_soc.o(.text.CaliK))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliKChooseBasedOnSOC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliVolRangeCalculate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSOCEdgeSlowDownConditon
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BiSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
</UL>

<P><STRONG><a name="[7e]"></a>CaliKChooseBasedOnSOC</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, b5_soc.o(.text.CaliKChooseBasedOnSOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CaliKChooseBasedOnSOC &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliK
</UL>

<P><STRONG><a name="[7d]"></a>CaliVolRangeCalculate</STRONG> (Thumb, 264 bytes, Stack size 28 bytes, b5_soc.o(.text.CaliVolRangeCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CaliVolRangeCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliK
</UL>

<P><STRONG><a name="[72]"></a>CellBalanceNormalTask</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, dataprocess.o(.text.CellBalanceNormalTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CellBalanceNormalTask &rArr; OpenCellBalance &rArr; BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCellBalance
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseCellBalance
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceStatusGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
</UL>

<P><STRONG><a name="[7f]"></a>CellBalanceStatusGet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bq769x2_protocol.o(.text.CellBalanceStatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CellBalanceStatusGet &rArr; Subcommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subcommands
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceNormalTask
</UL>

<P><STRONG><a name="[4d]"></a>CellBalanceTask</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, b5_soc.o(.text.CellBalanceTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CellBalanceTask &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[6d]"></a>Checksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bq769x2_protocol.o(.text.Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_SetRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subcommands
</UL>

<P><STRONG><a name="[80]"></a>CloseCellBalance</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bq769x2_protocol.o(.text.CloseCellBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CloseCellBalance &rArr; BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceNormalTask
</UL>

<P><STRONG><a name="[43]"></a>CommandSubcommands</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bq769x2_protocol.o(.text.CommandSubcommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CommandSubcommands &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFEBasicTask
</UL>

<P><STRONG><a name="[eb]"></a>DL_Common_delayCycles</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dl_common.o(.text.DL_Common_delayCycles))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[b4]"></a>DL_DMA_initChannel</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dl_dma.o(.text.DL_DMA_initChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_DMA_initChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_DMA_CH0_init
</UL>

<P><STRONG><a name="[5f]"></a>DL_FlashCTL_eraseMemoryFromRAM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dl_flashctl.o(.text.DL_FlashCTL_eraseMemoryFromRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DL_FlashCTL_eraseMemoryFromRAM &rArr; DL_FlashCTL_executeCommandFromRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_executeCommandFromRAM (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSWriteEETask
</UL>

<P><STRONG><a name="[fc]"></a>DL_FlashCTL_programMemory32WithECCGenerated</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dl_flashctl.o(.text.DL_FlashCTL_programMemory32WithECCGenerated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_FlashCTL_programMemory32WithECCGenerated
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write32Flash
</UL>

<P><STRONG><a name="[5e]"></a>DL_FlashCTL_unprotectSector</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dl_flashctl.o(.text.DL_FlashCTL_unprotectSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DL_FlashCTL_unprotectSector
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write32Flash
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSWriteEETask
</UL>

<P><STRONG><a name="[9b]"></a>DL_I2C_fillControllerTXFIFO</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dl_i2c.o(.text.DL_I2C_fillControllerTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_I2C_fillControllerTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
</UL>

<P><STRONG><a name="[6f]"></a>DL_I2C_flushControllerRXFIFO</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dl_i2c.o(.text.DL_I2C_flushControllerRXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
</UL>

<P><STRONG><a name="[9d]"></a>DL_I2C_flushControllerTXFIFO</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dl_i2c.o(.text.DL_I2C_flushControllerTXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
</UL>

<P><STRONG><a name="[c0]"></a>DL_I2C_setClockConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dl_i2c.o(.text.DL_I2C_setClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_I2C_setClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[c8]"></a>DL_SPI_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dl_spi.o(.text.DL_SPI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_SPI_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SPI_0_init
</UL>

<P><STRONG><a name="[b2]"></a>DL_SPI_receiveDataBlocking8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dl_spi.o(.text.DL_SPI_receiveDataBlocking8))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
</UL>

<P><STRONG><a name="[c7]"></a>DL_SPI_setClockConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dl_spi.o(.text.DL_SPI_setClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_SPI_setClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SPI_0_init
</UL>

<P><STRONG><a name="[d0]"></a>DL_SYSCTL_setLFCLKSourceLFXT</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dl_sysctl_mspm0g1x0x_g3x0x.o(.text.DL_SYSCTL_setLFCLKSourceLFXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_SYSCTL_setLFCLKSourceLFXT
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
</UL>

<P><STRONG><a name="[d4]"></a>DL_Timer_initTimerMode</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, dl_timer.o(.text.DL_Timer_initTimerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_Timer_initTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_TIMER_init
</UL>

<P><STRONG><a name="[d3]"></a>DL_Timer_setClockConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dl_timer.o(.text.DL_Timer_setClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_Timer_setClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_TIMER_init
</UL>

<P><STRONG><a name="[f9]"></a>DL_UART_fillTXFIFO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dl_uart.o(.text.DL_UART_fillTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_UART_fillTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteArray
</UL>

<P><STRONG><a name="[da]"></a>DL_UART_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dl_uart.o(.text.DL_UART_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_UART_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[d9]"></a>DL_UART_setClockConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dl_uart.o(.text.DL_UART_setClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_UART_setClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[45]"></a>DataCheck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, b5_soc.o(.text.DataCheck))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[ac]"></a>DebugRegister</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, pc_protocol.o(.text.DebugRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DebugRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_ProcessData
</UL>

<P><STRONG><a name="[61]"></a>DirectCommands</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, bq769x2_protocol.o(.text.DirectCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DirectCommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadTemperature
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadCurrent
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_ReadVoltage
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ76952_ReadBatteryStatus
</UL>

<P><STRONG><a name="[104]"></a>FaultProtect_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, faultprotect.o(.text.FaultProtect_init))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>HysteresisInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, b5_soc.o(.text.HysteresisInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HysteresisInit &rArr; Read32Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read32Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSStartUp
</UL>

<P><STRONG><a name="[4f]"></a>HysteresisTask</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, b5_soc.o(.text.HysteresisTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HysteresisTask
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C1_IRQHandler &rArr; DL_I2C_getPendingInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_getPendingInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>I2C_ReadReg</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, i2c_comm.o(.text.I2C_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_flushControllerTXFIFO
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_fillControllerTXFIFO
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_receiveControllerData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_isControllerRXFIFOEmpty
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_startControllerTransfer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_getControllerStatus
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subcommands
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
</UL>

<P><STRONG><a name="[6b]"></a>I2C_WriteReg</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, i2c_comm.o(.text.I2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_flushControllerTXFIFO
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_fillControllerTXFIFO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_startControllerTransfer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_getControllerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_SetRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subcommands
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandSubcommands
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
</UL>

<P><STRONG><a name="[a1]"></a>InterpolVolBasedOnCur</STRONG> (Thumb, 772 bytes, Stack size 96 bytes, b5_soc.o(.text.InterpolVolBasedOnCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InterpolVolBasedOnCur &rArr; VolInterpolation &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolInterpolation
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
</UL>

<P><STRONG><a name="[a6]"></a>MT9805_CommunicationInit</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mt9805_protocol.o(.text.MT9805_CommunicationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MT9805_CommunicationInit &rArr; Compare_CFRG_B &rArr; Write9805_CFGRB &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_SetADCOPT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_B
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_A
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Awake
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Init
</UL>

<P><STRONG><a name="[a8]"></a>MT9805_GlobeVaribleInit</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, mt9805_protocol.o(.text.MT9805_GlobeVaribleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MT9805_GlobeVaribleInit &rArr; delayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Init
</UL>

<P><STRONG><a name="[a9]"></a>MT9805_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mt9805_protocol.o(.text.MT9805_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MT9805_Init &rArr; MT9805_CommunicationInit &rArr; Compare_CFRG_B &rArr; Write9805_CFGRB &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_GlobeVaribleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>OpenCellBalance</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bq769x2_protocol.o(.text.OpenCellBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OpenCellBalance &rArr; BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceNormalTask
</UL>

<P><STRONG><a name="[aa]"></a>PC_ProcessData</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, pc_protocol.o(.text.PC_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PC_ProcessData &rArr; PC_SendData &rArr; UART_WriteArray &rArr; DL_UART_fillTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SendData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>PC_SendData</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pc_protocol.o(.text.PC_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PC_SendData &rArr; UART_WriteArray &rArr; DL_UART_fillTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_ProcessData
</UL>

<P><STRONG><a name="[103]"></a>PC_protocol_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pc_protocol.o(.text.PC_protocol_init))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>Read32Flash</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, b5_soc.o(.text.Read32Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Read32Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HysteresisInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOHInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSStartUp
</UL>

<P><STRONG><a name="[46]"></a>ResistanceCal</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, b5_soc.o(.text.ResistanceCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ResistanceCal &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_value
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[4e]"></a>SOHTask</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, b5_soc.o(.text.SOHTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SOHTask &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[a5]"></a>SPI_CS_HIGH</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_comm.o(.text.SPI_CS_HIGH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CS_HIGH &rArr; DL_GPIO_setPins
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_setPins
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRB
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Awake
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>SPI_CS_LOW</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_comm.o(.text.SPI_CS_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CS_LOW &rArr; DL_GPIO_clearPins
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_clearPins
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRB
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Awake
</UL>

<P><STRONG><a name="[a4]"></a>SPI_WriteReadByte</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, spi_comm.o(.text.SPI_WriteReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_receiveDataBlocking8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_isRXFIFOEmpty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_transmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRB
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRA
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Awake
</UL>

<P><STRONG><a name="[b3]"></a>SYSCFG_DL_DMA_CH0_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_DMA_CH0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSCFG_DL_DMA_CH0_init &rArr; DL_DMA_initChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_initChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_DMA_init
</UL>

<P><STRONG><a name="[b5]"></a>SYSCFG_DL_DMA_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_DMA_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSCFG_DL_DMA_init &rArr; SYSCFG_DL_DMA_CH0_init &rArr; DL_DMA_initChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_DMA_CH0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[b6]"></a>SYSCFG_DL_GPIO_init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYSCFG_DL_GPIO_init &rArr; DL_GPIO_initPeripheralInputFunctionFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_enableOutput
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_clearPins
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_initDigitalOutput
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_initPeripheralInputFunction
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_initPeripheralOutputFunction
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_enableHiZ
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_initPeripheralInputFunctionFeatures
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_initPeripheralAnalogFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[bf]"></a>SYSCFG_DL_I2C_0_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_I2C_0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSCFG_DL_I2C_0_init &rArr; DL_I2C_setControllerRXFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setClockConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_enableController
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_enableControllerClockStretching
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setControllerRXFIFOThreshold
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setControllerTXFIFOThreshold
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setTimerPeriod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_resetControllerTransfer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_enableAnalogGlitchFilter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setAnalogGlitchFilterPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[c6]"></a>SYSCFG_DL_SPI_0_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_SPI_0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSCFG_DL_SPI_0_init &rArr; DL_SPI_setFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_setClockConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_setFIFOThreshold
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_setBitRateSerialClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[ca]"></a>SYSCFG_DL_SYSCTL_CLK_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_SYSCTL_CLK_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_DL_SYSCTL_CLK_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_getClockStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[cc]"></a>SYSCFG_DL_SYSCTL_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_SYSCTL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSCFG_DL_SYSCTL_init &rArr; DL_SYSCTL_setSYSOSCFreq &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_setLFCLKSourceLFXT
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_enableMFCLK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_disableSYSPLL
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_disableHFXT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_setSYSOSCFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_setBORThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[d2]"></a>SYSCFG_DL_TIMER_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_TIMER_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSCFG_DL_TIMER_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_initTimerMode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_setClockConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_enableClock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_enableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[d8]"></a>SYSCFG_DL_UART_0_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_UART_0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSCFG_DL_UART_0_init &rArr; DL_UART_setTXFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setClockConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setTXFIFOThreshold
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setRXFIFOThreshold
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_enableFIFOs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_enableDMAReceiveEvent
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_enableInterrupt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setBaudRateDivisor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setOversampling
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[df]"></a>SYSCFG_DL_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYSCFG_DL_init &rArr; SYSCFG_DL_GPIO_init &rArr; DL_GPIO_initPeripheralInputFunctionFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_CLK_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_DMA_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SPI_0_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_TIMER_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>SYSCFG_DL_initPower</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ti_msp_dl_config.o(.text.SYSCFG_DL_initPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYSCFG_DL_initPower &rArr; DL_SPI_enablePower
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_delayCycles
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_enablePower
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_enablePower
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_enablePower
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_enablePower
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_enablePower
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_reset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>

<P><STRONG><a name="[ec]"></a>SingleBatSOCCalVolCali</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, b5_soc.o(.text.SingleBatSOCCalVolCali))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SingleBatSOCCalVolCali &rArr; CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCaliCal
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolInterpolation
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVolCaliConditon
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BiSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCupdate
</UL>

<P><STRONG><a name="[ee]"></a>SingleBatSOCCalVolCaliCal</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, b5_soc.o(.text.SingleBatSOCCalVolCaliCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SingleBatSOCCalVolCaliCal &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
</UL>

<P><STRONG><a name="[52]"></a>SingleBatSOCCoulombClear</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, b5_soc.o(.text.SingleBatSOCCoulombClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SingleBatSOCCoulombClear
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCoulombTotalFinalUpdate
</UL>

<P><STRONG><a name="[51]"></a>SingleBatSOCCoulombFull</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, b5_soc.o(.text.SingleBatSOCCoulombFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SingleBatSOCCoulombFull
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCoulombTotalFinalUpdate
</UL>

<P><STRONG><a name="[4a]"></a>SingleBatSOCupdate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, b5_soc.o(.text.SingleBatSOCupdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SingleBatSOCupdate &rArr; SingleBatSOCCalVolCali &rArr; CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[82]"></a>Subcommands</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, bq769x2_protocol.o(.text.Subcommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Subcommands &rArr; I2C_ReadReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceStatusGet
</UL>

<P><STRONG><a name="[15]"></a>TIMA0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text.TIMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = TIMA0_IRQHandler &rArr; BMSTask &rArr; BMSCalTask &rArr; SingleBatSOCupdate &rArr; SingleBatSOCCalVolCali &rArr; CaliK &rArr; checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_getPendingInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TemperatureCali</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, b5_soc.o(.text.TemperatureCali))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSCalTask
</UL>

<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART0_IRQHandler &rArr; PC_ProcessData &rArr; PC_SendData &rArr; UART_WriteArray &rArr; DL_UART_fillTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_ProcessData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_getPendingInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mspm0g350x_uvision.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>UART_FaultReset</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pc_protocol.o(.text.UART_FaultReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_FaultReset &rArr; DL_DMA_setTransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_enableFIFOs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_enableChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_disableFIFOs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_setTransferSize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_setDestAddr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_setSrcAddr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_disableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>UART_WriteArray</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart_comm.o(.text.UART_WriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WriteArray &rArr; DL_UART_fillTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_fillTXFIFO
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_isBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SendData
</UL>

<P><STRONG><a name="[a2]"></a>VolInterpolation</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, b5_soc.o(.text.VolInterpolation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VolInterpolation &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
</UL>

<P><STRONG><a name="[60]"></a>Write32Flash</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, b5_soc.o(.text.Write32Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write32Flash &rArr; DL_FlashCTL_unprotectSector
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_programMemory32WithECCGenerated
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_unprotectSector
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSWriteEETask
</UL>

<P><STRONG><a name="[76]"></a>abs_value</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, b5_soc.o(.text.abs_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = abs_value
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCShowUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResistanceCal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolInitEstimate
</UL>

<P><STRONG><a name="[7c]"></a>checkSOCEdgeSlowDownConditon</STRONG> (Thumb, 356 bytes, Stack size 96 bytes, b5_soc.o(.text.checkSOCEdgeSlowDownConditon))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = checkSOCEdgeSlowDownConditon &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliK
</UL>

<P><STRONG><a name="[ed]"></a>checkVolCaliConditon</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, b5_soc.o(.text.checkVolCaliConditon))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = checkVolCaliConditon
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCali
</UL>

<P><STRONG><a name="[6c]"></a>delayMS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mymcucommbsw.o(.text.delayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_delayCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_GlobeVaribleInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_B
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_A
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ769x2_SetRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subcommands
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandSubcommands
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCommands
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>delayUS</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mymcucommbsw.o(.text.delayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_delayCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; BQDataGet &rArr; CellBalanceNormalTask &rArr; OpenCellBalance &rArr; BQ769x2_SetRegister &rArr; I2C_WriteReg &rArr; DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSSingleBatVolCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultProtect_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_protocol_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_programMemory32WithECCGenerated
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_eraseMemoryFromRAM
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_unprotectSector
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_GPIO_togglePins
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Timer_startCounter
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_enableChannel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_setTransferSize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_setDestAddr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_DMA_setSrcAddr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_unprotectSector
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HysteresisTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolInterpolation
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[108]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQDataGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaliKChooseBasedOnSOC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSOCEdgeSlowDownConditon
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBatSOCCalVolCaliCal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpolVolBasedOnCur
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOHTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellBalanceTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCShowUpdate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCCalVolCaliCal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxCoulombCount
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResistanceCal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoxSOCInitEstimate
</UL>

<P><STRONG><a name="[14b]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCVolEst_NoCur
</UL>

<P><STRONG><a name="[10a]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e1]"></a>DL_GPIO_reset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_GPIO_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_GPIO_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e2]"></a>DL_Timer_reset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_Timer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_Timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e3]"></a>DL_I2C_reset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_I2C_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e4]"></a>DL_UART_reset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_UART_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e5]"></a>DL_SPI_reset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_SPI_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_SPI_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e6]"></a>DL_GPIO_enablePower</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_GPIO_enablePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_GPIO_enablePower
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e7]"></a>DL_Timer_enablePower</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_Timer_enablePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_Timer_enablePower
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e8]"></a>DL_I2C_enablePower</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_I2C_enablePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_enablePower
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[e9]"></a>DL_UART_enablePower</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_UART_enablePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_enablePower
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[ea]"></a>DL_SPI_enablePower</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_SPI_enablePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_SPI_enablePower
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_initPower
</UL>

<P><STRONG><a name="[b7]"></a>DL_GPIO_initPeripheralAnalogFunction</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_GPIO_initPeripheralAnalogFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_GPIO_initPeripheralAnalogFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[b8]"></a>DL_GPIO_initPeripheralInputFunctionFeatures</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_GPIO_initPeripheralInputFunctionFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DL_GPIO_initPeripheralInputFunctionFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[b9]"></a>DL_GPIO_enableHiZ</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_GPIO_enableHiZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_GPIO_enableHiZ
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[ba]"></a>DL_GPIO_initPeripheralOutputFunction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_GPIO_initPeripheralOutputFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_initPeripheralOutputFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[bb]"></a>DL_GPIO_initPeripheralInputFunction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_GPIO_initPeripheralInputFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_initPeripheralInputFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[bc]"></a>DL_GPIO_initDigitalOutput</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_GPIO_initDigitalOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_GPIO_initDigitalOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[bd]"></a>DL_GPIO_clearPins</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_GPIO_clearPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_clearPins
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[be]"></a>DL_GPIO_enableOutput</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_GPIO_enableOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_enableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_GPIO_init
</UL>

<P><STRONG><a name="[cd]"></a>DL_SYSCTL_setBORThreshold</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_SYSCTL_setBORThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_SYSCTL_setBORThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
</UL>

<P><STRONG><a name="[94]"></a>DL_SYSCTL_setSYSOSCFreq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.DL_SYSCTL_setSYSOSCFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DL_SYSCTL_setSYSOSCFreq &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
</UL>

<P><STRONG><a name="[ce]"></a>DL_SYSCTL_disableHFXT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ti_msp_dl_config.o(.text.DL_SYSCTL_disableHFXT))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
</UL>

<P><STRONG><a name="[cf]"></a>DL_SYSCTL_disableSYSPLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ti_msp_dl_config.o(.text.DL_SYSCTL_disableSYSPLL))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
</UL>

<P><STRONG><a name="[d1]"></a>DL_SYSCTL_enableMFCLK</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ti_msp_dl_config.o(.text.DL_SYSCTL_enableMFCLK))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_init
</UL>

<P><STRONG><a name="[d5]"></a>DL_Timer_enableInterrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_Timer_enableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_Timer_enableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_TIMER_init
</UL>

<P><STRONG><a name="[d6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_TIMER_init
</UL>

<P><STRONG><a name="[d7]"></a>DL_Timer_enableClock</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_Timer_enableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_Timer_enableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_TIMER_init
</UL>

<P><STRONG><a name="[8c]"></a>DL_I2C_setAnalogGlitchFilterPulseWidth</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_I2C_setAnalogGlitchFilterPulseWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_I2C_setAnalogGlitchFilterPulseWidth &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[c1]"></a>DL_I2C_enableAnalogGlitchFilter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_I2C_enableAnalogGlitchFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_enableAnalogGlitchFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[c2]"></a>DL_I2C_resetControllerTransfer</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_I2C_resetControllerTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_resetControllerTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[c3]"></a>DL_I2C_setTimerPeriod</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_I2C_setTimerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_I2C_setTimerPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[8f]"></a>DL_I2C_setControllerTXFIFOThreshold</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_I2C_setControllerTXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_I2C_setControllerTXFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[8e]"></a>DL_I2C_setControllerRXFIFOThreshold</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_I2C_setControllerRXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_I2C_setControllerRXFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[c4]"></a>DL_I2C_enableControllerClockStretching</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_I2C_enableControllerClockStretching))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_enableControllerClockStretching
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[c5]"></a>DL_I2C_enableController</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_I2C_enableController))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_enableController
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_I2C_0_init
</UL>

<P><STRONG><a name="[96]"></a>DL_UART_setOversampling</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.DL_UART_setOversampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DL_UART_setOversampling &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[95]"></a>DL_UART_setBaudRateDivisor</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_UART_setBaudRateDivisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_UART_setBaudRateDivisor &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[db]"></a>DL_UART_enableInterrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_UART_enableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_UART_enableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[dc]"></a>DL_UART_enableDMAReceiveEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ti_msp_dl_config.o(.text.DL_UART_enableDMAReceiveEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_UART_enableDMAReceiveEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[dd]"></a>DL_UART_enableFIFOs</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_UART_enableFIFOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_enableFIFOs
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[97]"></a>DL_UART_setRXFIFOThreshold</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_UART_setRXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_UART_setRXFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[98]"></a>DL_UART_setTXFIFOThreshold</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_UART_setTXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_UART_setTXFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[de]"></a>DL_UART_enable</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_UART_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_UART_0_init
</UL>

<P><STRONG><a name="[92]"></a>DL_SPI_setBitRateSerialClockDivider</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.DL_SPI_setBitRateSerialClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DL_SPI_setBitRateSerialClockDivider &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SPI_0_init
</UL>

<P><STRONG><a name="[93]"></a>DL_SPI_setFIFOThreshold</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ti_msp_dl_config.o(.text.DL_SPI_setFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DL_SPI_setFIFOThreshold &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SPI_0_init
</UL>

<P><STRONG><a name="[c9]"></a>DL_SPI_enable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ti_msp_dl_config.o(.text.DL_SPI_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_SPI_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SPI_0_init
</UL>

<P><STRONG><a name="[cb]"></a>DL_SYSCTL_getClockStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ti_msp_dl_config.o(.text.DL_SYSCTL_getClockStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DL_SYSCTL_CLK_init
</UL>

<P><STRONG><a name="[8d]"></a>DL_Common_updateReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ti_msp_dl_config.o(.text.DL_Common_updateReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_setFIFOThreshold
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SPI_setBitRateSerialClockDivider
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setTXFIFOThreshold
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setRXFIFOThreshold
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setBaudRateDivisor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_UART_setOversampling
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setControllerRXFIFOThreshold
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setControllerTXFIFOThreshold
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_setAnalogGlitchFilterPulseWidth
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_SYSCTL_setSYSOSCFreq
</UL>

<P><STRONG><a name="[fe]"></a>DL_DMA_setSrcAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.DL_DMA_setSrcAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_DMA_setSrcAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>DL_DMA_setDestAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.DL_DMA_setDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_DMA_setDestAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>DL_DMA_setTransferSize</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, main.o(.text.DL_DMA_setTransferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DL_DMA_setTransferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>DL_DMA_enableChannel</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, main.o(.text.DL_DMA_enableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DL_DMA_enableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, main.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>DL_Timer_startCounter</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.DL_Timer_startCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_Timer_startCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>DL_GPIO_togglePins</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.DL_GPIO_togglePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_togglePins
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>DL_UART_getPendingInterrupt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.DL_UART_getPendingInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_getPendingInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>DL_Timer_getPendingInterrupt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.DL_Timer_getPendingInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_Timer_getPendingInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMA0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>DL_I2C_getPendingInterrupt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.DL_I2C_getPendingInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_getPendingInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>DL_I2C_getControllerStatus</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, i2c_comm.o(.text.DL_I2C_getControllerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_getControllerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
</UL>

<P><STRONG><a name="[90]"></a>DL_I2C_startControllerTransfer</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, i2c_comm.o(.text.DL_I2C_startControllerTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DL_I2C_startControllerTransfer &rArr; DL_Common_updateReg
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteReg
</UL>

<P><STRONG><a name="[91]"></a>DL_Common_updateReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_comm.o(.text.DL_Common_updateReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_Common_updateReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_I2C_startControllerTransfer
</UL>

<P><STRONG><a name="[9e]"></a>DL_I2C_isControllerRXFIFOEmpty</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, i2c_comm.o(.text.DL_I2C_isControllerRXFIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_isControllerRXFIFOEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
</UL>

<P><STRONG><a name="[a0]"></a>DL_I2C_receiveControllerData</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, i2c_comm.o(.text.DL_I2C_receiveControllerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_I2C_receiveControllerData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadReg
</UL>

<P><STRONG><a name="[fa]"></a>DL_UART_isBusy</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, uart_comm.o(.text.DL_UART_isBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_isBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteArray
</UL>

<P><STRONG><a name="[f2]"></a>DL_DMA_disableChannel</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pc_protocol.o(.text.DL_DMA_disableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DL_DMA_disableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[f3]"></a>DL_DMA_setSrcAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pc_protocol.o(.text.DL_DMA_setSrcAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_DMA_setSrcAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[f4]"></a>DL_DMA_setDestAddr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pc_protocol.o(.text.DL_DMA_setDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_DMA_setDestAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[f5]"></a>DL_DMA_setTransferSize</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, pc_protocol.o(.text.DL_DMA_setTransferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DL_DMA_setTransferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[f6]"></a>DL_UART_disableFIFOs</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pc_protocol.o(.text.DL_UART_disableFIFOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_disableFIFOs
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[f7]"></a>DL_DMA_enableChannel</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pc_protocol.o(.text.DL_DMA_enableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DL_DMA_enableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[f8]"></a>DL_UART_enableFIFOs</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pc_protocol.o(.text.DL_UART_enableFIFOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_UART_enableFIFOs
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FaultReset
</UL>

<P><STRONG><a name="[b0]"></a>DL_SPI_transmitData8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_comm.o(.text.DL_SPI_transmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_SPI_transmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
</UL>

<P><STRONG><a name="[b1]"></a>DL_SPI_isRXFIFOEmpty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spi_comm.o(.text.DL_SPI_isRXFIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_SPI_isRXFIFOEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
</UL>

<P><STRONG><a name="[af]"></a>DL_GPIO_clearPins</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_comm.o(.text.DL_GPIO_clearPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_clearPins
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_LOW
</UL>

<P><STRONG><a name="[ae]"></a>DL_GPIO_setPins</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_comm.o(.text.DL_GPIO_setPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DL_GPIO_setPins
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
</UL>

<P><STRONG><a name="[84]"></a>MT9805_Awake</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mt9805_protocol.o(.text.MT9805_Awake))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MT9805_Awake &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_LOW
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_B
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_A
</UL>

<P><STRONG><a name="[85]"></a>Write9805_CFGRA</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, mt9805_protocol.o(.text.Write9805_CFGRA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write9805_CFGRA &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M9805_pec_calc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_LOW
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_A
</UL>

<P><STRONG><a name="[88]"></a>Write9805_CFGRB</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, mt9805_protocol.o(.text.Write9805_CFGRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write9805_CFGRB &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M9805_pec_calc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_LOW
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_B
</UL>

<P><STRONG><a name="[83]"></a>Compare_CFRG_A</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, mt9805_protocol.o(.text.Compare_CFRG_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Compare_CFRG_A &rArr; Write9805_CFGRA &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Awake
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
</UL>

<P><STRONG><a name="[87]"></a>Compare_CFRG_B</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, mt9805_protocol.o(.text.Compare_CFRG_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Compare_CFRG_B &rArr; Write9805_CFGRB &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CFGRB
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRB
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_Awake
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
</UL>

<P><STRONG><a name="[a7]"></a>MT9805_SetADCOPT</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, mt9805_protocol.o(.text.MT9805_SetADCOPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MT9805_SetADCOPT
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT9805_CommunicationInit
</UL>

<P><STRONG><a name="[fd]"></a>M9805_pec_calc</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, mt9805_protocol.o(.text.M9805_pec_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = M9805_pec_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write9805_CFGRA
</UL>

<P><STRONG><a name="[86]"></a>Read_CFGRA</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mt9805_protocol.o(.text.Read_CFGRA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_CFGRA &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_LOW
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_A
</UL>

<P><STRONG><a name="[89]"></a>Read_CFGRB</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mt9805_protocol.o(.text.Read_CFGRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_CFGRB &rArr; SPI_WriteReadByte &rArr; DL_SPI_transmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_LOW
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReadByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_CFRG_B
</UL>

<P><STRONG><a name="[8a]"></a>DL_FlashCTL_executeCommandFromRAM</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, dl_flashctl.o(.ramfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DL_FlashCTL_executeCommandFromRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_FlashCTL_eraseMemoryFromRAM (via Veneer)
</UL>

<P><STRONG><a name="[35]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[34]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10b]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[109]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
